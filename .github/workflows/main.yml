name: CI/CD Pipeline

on:
  push:
    branches: [ '*' ]
  pull_request:
    types: [closed]
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - cleanup
      branch:
        description: 'Branch to cleanup (for cleanup action only)'
        required: false
        default: 'main'
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up environment
        run: echo "Setting up test environment"
      - name: Run tests
        run: echo "Running tests"

  cleanup-merged-branch:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Read configuration
        run: |
          CONFIG_FILE="config/project-config.json"
          PROJECT_NAME=$(jq -r '.projectName' $CONFIG_FILE)
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV

      - name: Set cleanup variables
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          BRANCH_SAFE=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g' | cut -c1-10)
          STACK_NAME="${PROJECT_NAME}-${BRANCH_SAFE}"
          echo "Cleaning up branch: $BRANCH_NAME (sanitized: $BRANCH_SAFE)"
          echo "Target stack: $STACK_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "BRANCH_SAFE=$BRANCH_SAFE" >> $GITHUB_ENV
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV

      - name: Get bucket names
        run: |
          TEMPLATE_BUCKET=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Parameters[?ParameterKey=='TemplateBucket'].ParameterValue" --output text 2>/dev/null || echo "")
          WEBSITE_BUCKET=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='WebsiteBucketName'].OutputValue" --output text 2>/dev/null || echo "")
          RESUME_BUCKET=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='ResumeBucketName'].OutputValue" --output text 2>/dev/null || echo "")
          CLOUDFRONT_LOGS_BUCKET="vegawebaws-${{ env.BRANCH_SAFE }}-cloudfront-logs"
          echo "TEMPLATE_BUCKET=$TEMPLATE_BUCKET" >> $GITHUB_ENV
          echo "WEBSITE_BUCKET=$WEBSITE_BUCKET" >> $GITHUB_ENV
          echo "RESUME_BUCKET=$RESUME_BUCKET" >> $GITHUB_ENV
          echo "CLOUDFRONT_LOGS_BUCKET=$CLOUDFRONT_LOGS_BUCKET" >> $GITHUB_ENV

      - name: Empty S3 buckets
        continue-on-error: true
        run: |
          
          # Empty all buckets with fault tolerance
          for bucket in "${{ env.WEBSITE_BUCKET }}" "${{ env.RESUME_BUCKET }}" "${{ env.CLOUDFRONT_LOGS_BUCKET }}" "${{ env.TEMPLATE_BUCKET }}"; do
            if [ ! -z "$bucket" ]; then
              echo "Checking bucket: $bucket"
              if aws s3api head-bucket --bucket "$bucket" 2>/dev/null; then
                echo "Emptying bucket: $bucket"
                aws s3 rm s3://$bucket --recursive 2>/dev/null || echo "Failed to empty $bucket, continuing..."
                # Also delete any versioned objects
                aws s3api delete-objects --bucket "$bucket" --delete "$(aws s3api list-object-versions --bucket "$bucket" --query '{Objects: Versions[].{Key: Key, VersionId: VersionId}}' --output json 2>/dev/null || echo '{"Objects":[]}')" 2>/dev/null || echo "Failed to delete versions in $bucket, continuing..."
                aws s3api delete-objects --bucket "$bucket" --delete "$(aws s3api list-object-versions --bucket "$bucket" --query '{Objects: DeleteMarkers[].{Key: Key, VersionId: VersionId}}' --output json 2>/dev/null || echo '{"Objects":[]}')" 2>/dev/null || echo "Failed to delete markers in $bucket, continuing..."
              else
                echo "Bucket $bucket not found or not accessible, skipping..."
              fi
            fi
          done

      - name: Delete CloudFormation stack
        run: |
          if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} 2>/dev/null; then
            echo "Deleting stack: ${{ env.STACK_NAME }}"
            aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }}
            
            echo "Waiting for stack deletion..."
            aws cloudformation wait stack-delete-complete --stack-name ${{ env.STACK_NAME }} || true
            
            # Check for any remaining nested stacks and force delete them
            NESTED_STACKS=("${{ env.STACK_NAME }}-SecurityGroupsStack-*" "${{ env.STACK_NAME }}-StaticWebsiteStack-*")
            
            for prefix in "${NESTED_STACK_PREFIXES[@]}"; do
              for stack in $(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --query "StackSummaries[?starts_with(StackName, '$prefix')].StackName" --output text 2>/dev/null || echo ""); do
                if [ ! -z "$stack" ] && aws cloudformation describe-stacks --stack-name "$stack" 2>/dev/null; then
                  echo "Force deleting nested stack: $stack"
                  aws cloudformation delete-stack --stack-name "$stack"
                  aws cloudformation wait stack-delete-complete --stack-name "$stack" || true
                fi
              done
            done
          fi

      - name: Delete template bucket
        run: |
          if [ ! -z "${{ env.TEMPLATE_BUCKET }}" ]; then
            echo "Deleting template bucket: ${{ env.TEMPLATE_BUCKET }}"
            aws s3 rb s3://${{ env.TEMPLATE_BUCKET }} --force || true
          fi

  deploy:
    if: (github.event_name == 'push' && github.event.commits[0] != null) || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main') || (github.event.inputs.action == 'deploy')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Read configuration
        id: config
        run: |
          CONFIG_FILE="config/project-config.json"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Error: Config file not found at $CONFIG_FILE"
            exit 1
          fi

          PROJECT_NAME=$(jq -r '.projectName' $CONFIG_FILE)
          VPC_ID=$(jq -r '.vpcId' $CONFIG_FILE)
          SUBNET_IDS=$(jq -r '.subnetIds' $CONFIG_FILE)
          AI_MODEL=$(jq -r '.aiModel' $CONFIG_FILE)

          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
          echo "SUBNET_IDS=$SUBNET_IDS" >> $GITHUB_ENV
          echo "AI_MODEL=$AI_MODEL" >> $GITHUB_ENV

      - name: Set environment variables
        run: |
          # Extract branch name and sanitize for AWS resource naming
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          BRANCH_SAFE=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g' | cut -c1-10)
          
          # Use branch name as environment
          ENVIRONMENT="$BRANCH_SAFE"
          STACK_NAME="${PROJECT_NAME}-${ENVIRONMENT}"
          
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV

      - name: Create template bucket
        run: |
            TIMESTAMP=$(date +%s)
            # Convert project name to lowercase and replace invalid characters
            PROJECT_NAME_LOWER=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]')
            TEMPLATE_BUCKET="${PROJECT_NAME_LOWER}-${ENVIRONMENT}-templates-${TIMESTAMP}"
            echo "TEMPLATE_BUCKET=$TEMPLATE_BUCKET" >> $GITHUB_ENV

            echo "Creating bucket: $TEMPLATE_BUCKET"
            aws s3 mb s3://$TEMPLATE_BUCKET

      - name: Upload templates to S3
        run: aws s3 sync infrastructure/cloudformation/templates/ s3://$TEMPLATE_BUCKET/templates/

      - name: Deploy CloudFormation stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.STACK_NAME }}
          template: infrastructure/cloudformation/main-template.yaml
          parameter-overrides: >-
            Environment=${{ env.ENVIRONMENT }},
            VpcId=${{ env.VPC_ID }},
            SubnetIds=${{ env.SUBNET_IDS }},
            TemplateBucket=${{ env.TEMPLATE_BUCKET }}
          no-fail-on-empty-changeset: "1"
          capabilities: "CAPABILITY_NAMED_IAM"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # or your project's version

      - name: Install dependencies
        run: npm ci
        working-directory: ./src
      
      - name: Build website
        run: npm run build
        working-directory: ./src


      - name: Upload website files
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='WebsiteBucketName'].OutputValue" --output text)
          aws s3 sync src/dist/ s3://$BUCKET_NAME/

      - name: Invalidate CloudFront cache
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" --output text)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

      - name: Get CloudFront URL
        run: |
          CF_URL=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='WebsiteUrl'].OutputValue" --output text)
          echo "Branch: ${{ env.BRANCH_NAME }} deployed as environment: ${{ env.ENVIRONMENT }}"
          echo "Your website is available at: https://$CF_URL"
  cleanup:
    if: github.event.inputs.action == 'cleanup'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Read configuration
        id: config
        run: |
          CONFIG_FILE="config/project-config.json"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Error: Config file not found at $CONFIG_FILE"
            exit 1
          fi

          PROJECT_NAME=$(jq -r '.projectName' $CONFIG_FILE)
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV

      - name: Set cleanup variables
        run: |
          BRANCH_NAME="${{ github.event.inputs.branch || 'main' }}"
          BRANCH_SAFE=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g' | cut -c1-10)
          STACK_NAME="${PROJECT_NAME}-${BRANCH_SAFE}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "BRANCH_SAFE=$BRANCH_SAFE" >> $GITHUB_ENV
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV

      - name: Get bucket names
        run: |
          TEMPLATE_BUCKET=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Parameters[?ParameterKey=='TemplateBucket'].ParameterValue" --output text 2>/dev/null || echo "")
          WEBSITE_BUCKET=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='WebsiteBucketName'].OutputValue" --output text 2>/dev/null || echo "")
          echo "TEMPLATE_BUCKET=$TEMPLATE_BUCKET" >> $GITHUB_ENV
          echo "WEBSITE_BUCKET=$WEBSITE_BUCKET" >> $GITHUB_ENV

      - name: Empty S3 buckets
        continue-on-error: true
        run: |
          RESUME_BUCKET=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='ResumeBucketName'].OutputValue" --output text 2>/dev/null || echo "")
          CLOUDFRONT_LOGS_BUCKET="vegawebaws-${{ env.BRANCH_SAFE }}-cloudfront-logs"
          
          for bucket in "${{ env.WEBSITE_BUCKET }}" "$RESUME_BUCKET" "$CLOUDFRONT_LOGS_BUCKET" "${{ env.TEMPLATE_BUCKET }}"; do
            if [ ! -z "$bucket" ]; then
              echo "Checking bucket: $bucket"
              if aws s3api head-bucket --bucket "$bucket" 2>/dev/null; then
                echo "Emptying bucket: $bucket"
                aws s3 rm s3://$bucket --recursive 2>/dev/null || echo "Failed to empty $bucket, continuing..."
                aws s3api delete-objects --bucket "$bucket" --delete "$(aws s3api list-object-versions --bucket "$bucket" --query '{Objects: Versions[].{Key: Key, VersionId: VersionId}}' --output json 2>/dev/null || echo '{"Objects":[]}')" 2>/dev/null || echo "Failed to delete versions in $bucket, continuing..."
                aws s3api delete-objects --bucket "$bucket" --delete "$(aws s3api list-object-versions --bucket "$bucket" --query '{Objects: DeleteMarkers[].{Key: Key, VersionId: VersionId}}' --output json 2>/dev/null || echo '{"Objects":[]}')" 2>/dev/null || echo "Failed to delete markers in $bucket, continuing..."
              else
                echo "Bucket $bucket not found or not accessible, skipping..."
              fi
            fi
          done
      - name: Delete CloudFormation stack
        run: |
          if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} 2>/dev/null; then
            echo "Deleting stack: ${{ env.STACK_NAME }}"
            aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }}
            
            echo "Waiting for stack deletion..."
            aws cloudformation wait stack-delete-complete --stack-name ${{ env.STACK_NAME }} || true
            
            NESTED_STACKS=("${{ env.STACK_NAME }}-SecurityGroupsStack-*" "${{ env.STACK_NAME }}-StaticWebsiteStack-*")
            
            for pattern in "${NESTED_STACKS[@]}"; do
              for stack in $(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --query "StackSummaries[?starts_with(StackName, '${pattern%%-*}')].StackName" --output text 2>/dev/null || echo ""); do
                if [ ! -z "$stack" ] && aws cloudformation describe-stacks --stack-name "$stack" 2>/dev/null; then
                  echo "Force deleting nested stack: $stack"
                  aws cloudformation delete-stack --stack-name "$stack"
                  aws cloudformation wait stack-delete-complete --stack-name "$stack" || true
                fi
              done
            done
          fi

      - name: Delete template bucket
        if: env.TEMPLATE_BUCKET != ''
        run: |
          echo "Deleting template bucket: ${{ env.TEMPLATE_BUCKET }}"
          aws s3 rb s3://${{ env.TEMPLATE_BUCKET }} --force
